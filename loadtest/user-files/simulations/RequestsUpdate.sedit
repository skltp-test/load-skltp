package SKLTP

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import scala.concurrent.duration._

class RequestsUpdate extends Simulation {

        // Traffic will be routed toward LOAD-MOCKS based choosen personId
	val feeder1 = csv("../user-files/data/ViaAGP.csv").circular
	val feederUpdate = csv("../user-files/data/Update.csv").circular
	
	val httpConf = http
		.baseUrl("https://TARGETHOST/vp")
		.acceptEncodingHeader("gzip, deflate")
		.userAgentHeader("SKLTP load tests")

        val GetDiagnosis_2 = exec(http("GetDiagnosis_2")
                .post("/clinicalprocess/healthcond/description/GetDiagnosis/2/rivtabp21")
                .body(ElFileBody("user-files/data/GetDiagnosis2.xml")).asXml
                .check(status.is(200), responseTimeInMillis.lt(35000)))


        val Update1000 = exec(http("Update1000")
                .post("/Update/1/rivtabp21")
                .body(ElFileBody("user-files/data/Update1000_GD.xml")).asXml
                        .check(status.is(200), responseTimeInMillis.lt(35000)))

        val requestGetDiagnosis_2 = scenario("GetDiagnosis_2").feed(feeder1).exec(GetDiagnosis_2)
        val requestUpdate1000 = scenario("Update1000").feed(feederUpdate).exec(Update1000)


  // Simulate NPÃ– that requests patient data once per second
  // NOTE: Injections are run in parallell, stepts within an injection are sequencial
  setUp(
    requestUpdate1000.inject(
	heavisideUsers(40) during (20 minutes)), 
    requestGetDiagnosis_2.inject(constantUsersPerSec(1) during(20 minutes)))
    .protocols(httpConf)  
    .assertions(
      details("Update1000").successfulRequests.percent.is(100),
      details("GetCareContacts_2").successfulRequests.percent.gt(95))
  
}
