pipeline {
    agent none
    parameters {
        string(name: 'RPS', defaultValue: '50', description: 'Direct Requests Per Second')
        string(name: 'DURATION_MINUTES', defaultValue: '10', description: 'Duration in minutes')
    }
    stages {
        stage('Setup') {
            agent { label 'slave1' }
            steps {
                configFileProvider([configFile(fileId: '267423b6-76ad-4e54-a7c2-222fafbf7fb9', variable: 'TRUST_PEM')]) {
                withCredentials([certificate(credentialsId: 'TSTNMT2321000156-B02', keystoreVariable: 'CERTKEY', passwordVariable: 'CERTKEYPWD')]) {
                    sh """
                        #! /bin/bash
                        echo "Tests will be run against the following host: ${TARGETHOST}"
                        cd loadtest

                        rm -fr ./conf/truststore.p12
                        csplit -z -f ./conf/trust- $TRUST_PEM '/-----END CERTIFICATE-----/+1' '{*}' 
                        ls ./conf/trust-*| xargs -I{} keytool -importcert -storetype PKCS12 -keystore ./conf/truststore.p12 -storepass banan69 -file {} -alias {} -noprompt

                        cat ${CERTKEY} > ./conf/cert.p12
                        ls -l ./conf/cert.p12
                        sed -e 's@KEYSTOREVARIABLE@'"cert.p12"'@; s@KEYSTOREPASSWORD@'"${CERTKEYPWD}"'@' ./conf/gatling.sedit > ./conf/gatling.conf
                        sed -i -e 's@TRUSTSTOREVARIABLE@'"truststore.p12"'@; s@TRUSTSTOREPASSWORD@'"banan69"'@' ./conf/gatling.conf
                    """
                    stash name: "conf", includes: "loadtest/conf/*"
                }}
            }
        }
        stage('Load testing') {
            //parallel {
                //stage('Test On slave2') {
                    agent {
                        label "slave2"
                    }
                    steps {
                        unstash "conf"
                        sh """
                        #! /bin/bash
                        cd loadtest
                        docker-compose run --rm --entrypoint /opt/gatling/user-files/run-test-dist.sh testsuite SKLTP.RequestsVP
                        cd results
                        ls -la
                        mv simulation.log simlation-slave2.log
                        """
                        stash name: "results", includes: "loadtest/results/*"
                    }
                    post {
                        always {
                            //TODO
                        }
                    }

                //}

            //}
        }
        stage('Results') {
            agent { label 'slave1' }
            steps {
                unstash "results"
                sh """cd loadtest
                docker-compose run --rm --entrypoint /opt/gatling/user-files/report.sh testsuite
                """
                gatlingArchive()
            }
            post {
                always {
                    junit 'loadtest/results/**/assertions.xml'
                }
            }
        }
    }

}
